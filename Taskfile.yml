version: "3"

tasks:
  # Code Quality Tasks
  fmt:
    desc: Format Lua code with StyLua
    cmds:
      - stylua --check src/
      - echo "‚úÖ Code formatting is correct"
    silent: false

  fmt-fix:
    desc: Auto-fix Lua code formatting with StyLua
    cmds:
      - stylua src/
      - echo "‚úÖ Code formatted successfully"

  lint:
    desc: Run selene static analysis
    cmds:
      - selene src/
      - echo "‚úÖ No linting issues found"

  lsp-check:
    desc: Run lua-language-server diagnostics on entire workspace (like Neovim does)
    cmds:
      - lua-language-server --check=. --checklevel=Warning --configpath=.luarc.json
      - echo "‚úÖ No LSP diagnostics found"

  check:
    desc: Run all code quality checks (format + lint + lsp)
    deps:
      - fmt
      - lint
      - lsp-check
    cmds:
      - echo "‚úÖ All code quality checks passed"

  pre-commit:
    desc: Run quality checks only on staged/changed files (for pre-commit hooks)
    cmds:
      - task: pre-commit-fmt
      - task: pre-commit-lint
      - task: pre-commit-lsp
      - echo "‚úÖ Pre-commit checks passed"

  pre-commit-fmt:
    desc: Check formatting only on staged files
    silent: true
    cmds:
      - |
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.lua$' || true)
        if [ -n "$STAGED_FILES" ]; then
          echo "üìù Checking formatting for staged files..."
          echo "$STAGED_FILES" | xargs stylua --check
          echo "‚úÖ Staged files formatting is correct"
        else
          echo "‚ÑπÔ∏è  No staged Lua files to check"
        fi

  pre-commit-lint:
    desc: Run selene only on staged files
    silent: true
    cmds:
      - |
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.lua$' || true)
        if [ -n "$STAGED_FILES" ]; then
          echo "üîç Linting staged files..."
          echo "$STAGED_FILES" | xargs selene
          echo "‚úÖ Staged files passed linting"
        else
          echo "‚ÑπÔ∏è  No staged Lua files to lint"
        fi

  pre-commit-lsp:
    desc: Run LSP check when Lua files are staged
    silent: true
    cmds:
      - |
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.lua$' || true)
        if [ -n "$STAGED_FILES" ]; then
          echo "üîç Running LSP diagnostics (checks entire workspace)..."
          lua-language-server --check=. --checklevel=Warning --configpath=.luarc.json
          echo "‚úÖ LSP diagnostics passed"
        else
          echo "‚ÑπÔ∏è  No staged Lua files, skipping LSP check"
        fi

  pre-commit-fix:
    desc: Auto-fix formatting on staged files and re-stage them
    silent: true
    cmds:
      - |
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.lua$' || true)
        if [ -n "$STAGED_FILES" ]; then
          echo "üìù Auto-fixing formatting for staged files..."
          echo "$STAGED_FILES" | xargs stylua
          echo "$STAGED_FILES" | xargs git add
          echo "‚úÖ Formatting fixed and files re-staged"
        else
          echo "‚ÑπÔ∏è  No staged Lua files to fix"
        fi

  fix:
    desc: Auto-fix all fixable issues
    deps:
      - fmt-fix
    cmds:
      - echo "‚úÖ Auto-fixes applied"
  build:
    desc: Build release artifact
    cmds:
      - task: clean
      - task: copy-files
      - task: verify

  build-optimized:
    desc: Build optimized release artifact (removes comments)
    cmds:
      - task: clean
      - task: copy-files
      - task: remove-comments
      - task: verify

  remove-comments:
    desc: Remove comments from dist files to reduce size
    cmds:
      - lua scripts/remove-comments.lua dist/miniflux.koplugin
      - echo "‚úÖ Comments removed from dist files"

  clean:
    desc: Clean build directory
    cmds:
      - rm -rf dist
      - mkdir -p dist

  copy-files:
    desc: Copy all files from src/ to build directory
    cmds:
      - mkdir -p dist/miniflux.koplugin
      - cp -r src/* dist/miniflux.koplugin/

  verify:
    desc: Verify release artifact contents
    cmds:
      - echo "=== Release artifact contents ==="
      - find dist -type f | sort

  # Release Task
  release:
    desc: "Create a release (usage: task release version=patch|minor|major [dry_run=true])"
    silent: true
    cmds:
      - task: _release-validate
        vars:
          version: "{{.version}}"
          dry_run: "{{.dry_run}}"
      - |
        if [ "{{.dry_run}}" != "true" ]; then
          echo "üîÑ Running quality checks..."
        fi
      - |
        if [ "{{.dry_run}}" != "true" ]; then
          task check
        fi
      - task: _release-execute
        vars:
          version: "{{.version}}"
          dry_run: "{{.dry_run}}"

  _release-validate:
    internal: true
    silent: true
    cmds:
      - |
        # Validate required parameters
        if [ -z "{{.version}}" ]; then
          echo "‚ùå Missing required parameter: version"
          echo ""
          echo "Usage:"
          echo "  task release version=patch      # 0.1.0 ‚Üí 0.1.1"
          echo "  task release version=minor      # 0.1.0 ‚Üí 0.2.0"
          echo "  task release version=major      # 0.1.0 ‚Üí 1.0.0"
          echo "  task release version=1.5.3      # 0.1.0 ‚Üí 1.5.3 (explicit)"
          echo ""
          echo "Options:"
          echo "  dry_run=true                    # Preview without executing"
          echo ""
          echo "Examples:"
          echo "  task release version=patch"
          echo "  task release version=minor dry_run=true"
          exit 1
        fi
        
        # Check if version is semantic (patch/minor/major) or explicit (x.y.z)
        if [[ "{{.version}}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          # Explicit version provided
          EXPLICIT_VERSION="{{.version}}"
          VERSION_TYPE="explicit"
        else
          # Validate semantic version parameter
          case "{{.version}}" in
            patch|minor|major)
              VERSION_TYPE="semantic"
              ;;
            *)
              echo "‚ùå Invalid version parameter: {{.version}}"
              echo "Valid options: patch, minor, major, or explicit version (e.g., 1.2.3)"
              exit 1
              ;;
          esac
        fi
        
        # Get current version from _meta.lua
        CURRENT=$(grep -o "version = '[^']*'" src/_meta.lua | sed "s/version = '\(.*\)'/\1/")
        echo "üìç Current version: $CURRENT"
        
        # Calculate new version
        if [ "$VERSION_TYPE" = "explicit" ]; then
          NEW_VERSION="$EXPLICIT_VERSION"
        else
          # Parse version parts for semantic bumping
          IFS='.' read -r major minor patch <<< "$CURRENT"
          
          # Calculate new version based on bump type
          case "{{.version}}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="$major.$minor.$patch"
        fi
        
        # Show what will happen
        echo ""
        echo "üöÄ {{.version}} release: $CURRENT ‚Üí $NEW_VERSION"
        echo ""
        # Get current branch for display
        CURRENT_BRANCH=$(git branch --show-current)
        echo "This will:"
        echo "  ‚Ä¢ Run all quality checks (lint, format, LSP)"
        echo "  ‚Ä¢ Create release branch: release/v$NEW_VERSION"
        echo "  ‚Ä¢ Update src/_meta.lua version to $NEW_VERSION"
        echo "  ‚Ä¢ Create commit: 'chore: bump version to $NEW_VERSION'"
        echo "  ‚Ä¢ Push release branch and create PR to dev"
        echo "  ‚Ä¢ When PR is merged, GitHub Actions will create release"
        echo ""
        
        # Handle dry run
        if [ "{{.dry_run}}" = "true" ]; then
          echo "üîç DRY RUN - No changes will be made"
          echo ""
          echo "To execute for real: task release version={{.version}}"
          exit 0
        fi
        
        # Confirmation prompt
        printf "Are you sure you want to create this release? [y/N]: "
        read -r confirm
        case "$confirm" in
          [yY]|[yY][eE][sS])
            echo "‚úÖ Proceeding with release..."
            ;;
          *)
            echo "‚ùå Release cancelled"
            exit 1
            ;;
        esac

  _release-execute:
    internal: true
    silent: true
    cmds:
      - |
        if [ "{{.dry_run}}" = "true" ]; then
          exit 0
        fi
        
        # Calculate new version (same logic as validation)
        if [[ "{{.version}}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          NEW_VERSION="{{.version}}"
        else
          # Get current version and bump semantically
          CURRENT=$(grep -o "version = '[^']*'" src/_meta.lua | sed "s/version = '\(.*\)'/\1/")
          IFS='.' read -r major minor patch <<< "$CURRENT"
          
          case "{{.version}}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="$major.$minor.$patch"
        fi
        
        # Create release branch
        RELEASE_BRANCH="release/v$NEW_VERSION"
        echo "üåø Creating release branch: $RELEASE_BRANCH"
        git checkout -b "$RELEASE_BRANCH"
        
        # Update _meta.lua
        echo "üìù Updating src/_meta.lua to $NEW_VERSION..."
        sed -i.bak "s/version = '[^']*'/version = '$NEW_VERSION'/" src/_meta.lua
        rm -f src/_meta.lua.bak
        
        # Commit changes
        echo "üìù Creating commit..."
        git add src/_meta.lua
        git commit -m "chore: bump version to $NEW_VERSION"
        
        # Push release branch
        echo "üì§ Pushing release branch: $RELEASE_BRANCH"
        git push -u origin "$RELEASE_BRANCH"
        
        # Create PR using GitHub CLI
        echo "üîÑ Creating Pull Request..."
        gh pr create \
          --title "Release v$NEW_VERSION" \
          --body "Automated version bump to $NEW_VERSION from release task. Ready for release to dev branch." \
          --base dev \
          --head "$RELEASE_BRANCH"
        
        echo ""
        echo "‚úÖ Release PR created successfully!"
        echo "üìù Version updated to: $NEW_VERSION"
        echo "üåø Branch: $RELEASE_BRANCH"
        echo "üîÑ Pull Request created to dev branch"
        echo "üîó Check: https://github.com/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^.]*\).*/\1/')/pulls"
        echo ""
        echo "üìã Next steps:"
        echo "  1. Merge the PR to dev branch"
        echo "  2. Merge dev to main to create the release"
        echo "  3. Dev will auto-sync with main via GitHub Actions"
        echo "  4. If auto-sync fails, run: task sync-dev"

  sync-dev:
    desc: "Sync dev branch with main branch"
    silent: true
    cmds:
      - |
        echo "üîÑ Syncing dev branch with main..."
        
        # Get current branch
        CURRENT_BRANCH=$(git branch --show-current)
        echo "üìç Currently on: $CURRENT_BRANCH"
        
        # Fetch latest changes
        echo "üì• Fetching latest changes..."
        git fetch origin
        
        # Check if dev branch exists
        if ! git ls-remote --heads origin dev | grep -q dev; then
          echo "‚ùå Dev branch does not exist remotely"
          exit 1
        fi
        
        # Switch to dev branch
        echo "üåø Switching to dev branch..."
        git checkout dev
        git pull origin dev
        
        # Get commit hashes
        MAIN_COMMIT=$(git rev-parse origin/main)
        DEV_COMMIT=$(git rev-parse HEAD)
        
        echo "üìç Main is at: $MAIN_COMMIT"
        echo "üìç Dev is at: $DEV_COMMIT"
        
        # Check if already up to date
        if [ "$MAIN_COMMIT" = "$DEV_COMMIT" ]; then
          echo "‚úÖ Dev branch is already up to date with main"
        elif git merge-base --is-ancestor dev origin/main; then
          echo "üöÄ Fast-forwarding dev to main..."
          git merge origin/main --ff-only
          git push origin dev
          echo "‚úÖ Dev branch successfully synced with main"
        else
          echo "‚ö†Ô∏è  Dev branch has diverged from main"
          echo "üìä Commits on dev not in main:"
          git log --oneline origin/main..dev
          echo ""
          echo "üìä Commits on main not in dev:"
          git log --oneline dev..origin/main
          echo ""
          echo "üîß Manual intervention required - dev branch cannot be fast-forwarded"
          echo "üí° Consider rebasing dev on main or resolving conflicts manually"
          exit 1
        fi
        
        # Return to original branch if it wasn't dev
        if [ "$CURRENT_BRANCH" != "dev" ]; then
          echo "üîÑ Returning to $CURRENT_BRANCH..."
          git checkout "$CURRENT_BRANCH"
        fi

  release-undo:
    desc: "Undo the last release (before pushing to remote)"
    silent: true
    cmds:
      - |
        echo "üîç Checking for unpushed release commits..."
        
        # Check if there are any unpushed commits
        UNPUSHED=$(git log origin/main..HEAD --oneline | grep "chore: bump version to" | head -1)
        if [ -z "$UNPUSHED" ]; then
          echo "‚ùå No unpushed version bump commits found"
          echo "This command only works if you haven't pushed the release yet"
          exit 1
        fi
        
        # Extract version from the commit message
        VERSION=$(echo "$UNPUSHED" | sed 's/.*chore: bump version to \([0-9.]*\).*/\1/')
        TAG="v$VERSION"
        
        echo "üìç Found unpushed release: $TAG"
        echo "Commit: $UNPUSHED"
        echo ""
        echo "This will:"
        echo "  ‚Ä¢ Delete local tag: $TAG"
        echo "  ‚Ä¢ Reset commit: Remove version bump commit"
        echo "  ‚Ä¢ Restore _meta.lua to previous version"
        echo ""
        printf "Are you sure you want to undo this release? [y/N]: "
        read -r confirm
        case "$confirm" in
          [yY]|[yY][eE][sS])
            echo "‚úÖ Undoing release..."
            ;;
          *)
            echo "‚ùå Undo cancelled"
            exit 1
            ;;
        esac
        
        # Delete the local tag if it exists
        if git tag | grep -q "^$TAG$"; then
          echo "üè∑Ô∏è  Deleting local tag: $TAG"
          git tag -d "$TAG"
        fi
        
        # Reset the last commit (the version bump)
        echo "‚è™ Resetting version bump commit"
        git reset --hard HEAD~1
        
        echo ""
        echo "‚úÖ Release $TAG has been undone!"
        echo "üìù Your _meta.lua has been restored to the previous version"
        echo "üí° You can now make corrections and create a new release"

