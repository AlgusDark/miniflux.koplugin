version: '3'

tasks:
  # Code Quality Tasks
  fmt:
    desc: Format Lua code with StyLua
    cmds:
      - stylua --check src/ main.lua
      - echo "✅ Code formatting is correct"
    silent: false

  fmt-fix:
    desc: Auto-fix Lua code formatting with StyLua
    cmds:
      - stylua src/ main.lua
      - echo "✅ Code formatted successfully"

  lint:
    desc: Run luacheck static analysis
    cmds:
      - luacheck src/ main.lua
      - echo "✅ No linting issues found"

  lsp-check:
    desc: Run lua-language-server diagnostics on entire workspace (like Neovim does)
    cmds:
      - lua-language-server --check=. --checklevel=Warning --configpath=.luarc.json
      - echo "✅ No LSP diagnostics found"

  test:
    desc: Run all tests with busted
    cmds:
      - busted spec/
      - echo "✅ All tests passed"

  check:
    desc: Run all code quality checks (format + lint + lsp + tests)
    deps:
      - fmt
      - lint
      - lsp-check
      - test
    cmds:
      - echo "✅ All code quality checks passed"

  fix:
    desc: Auto-fix all fixable issues
    deps:
      - fmt-fix
    cmds:
      - echo "✅ Auto-fixes applied"
  build:
    desc: Build release artifact
    cmds:
      - task: clean
      - task: copy-files
      - task: verify

  clean:
    desc: Clean build directory
    cmds:
      - rm -rf dist
      - mkdir -p dist

  copy-files:
    desc: Copy plugin files excluding development files
    cmds:
      - |
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='.gitignore' \
          --exclude='typedefs' \
          --exclude='scripts' \
          --exclude='Taskfile.yml' \
          --exclude='dist' \
          --exclude='spec' \
          --exclude='*.rockspec' \
          --exclude='improvements' \
          --include='src/' \
          . dist/miniflux.koplugin/

  verify:
    desc: Verify release artifact contents
    cmds:
      - echo "=== Release artifact contents ==="
      - find dist -type f | sort

  package:
    desc: Create zip package (for local testing)
    deps:
      - build
    cmds:
      - cd dist && zip -r miniflux.koplugin.zip miniflux.koplugin/
      - echo "Package created at dist/miniflux.koplugin.zip"

  test-build:
    desc: Test build locally and extract to verify
    deps:
      - package
    cmds:
      - rm -rf test-extract
      - mkdir test-extract
      - cd test-extract && unzip ../dist/miniflux.koplugin.zip
      - echo "=== Extracted files ==="
      - find test-extract -type f | sort